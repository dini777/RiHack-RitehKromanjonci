@using RiHack_RitehKromanjonci.Data
@using System.Security.Claims
@using RiHack_RitehKromanjonci.Models;

@inject AppDbContext Context
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime

<link href="./css/createpost.css" rel="stylesheet" />

@if (loggedUser is not null)
{
    <div class="post_container">
        <div class= "flex-container">
            <div class="box">
                <p>@loggedUser.Username</p>
            </div>
            <div class="box">
                <InputDate @bind-Value="TimeOfEvent" />
            </div>
        </div>
       
    </div>
    <div class="input-container">
        <input type="text" class="my-input" placeholder="Opišite aktivnost..." />
    </div>
    <div class="map">
        <RadzenGoogleMap Style="height: 600px;"
                         Zoom="@zoom"
                         MapClick="@OnMapClick"
                         Center="@(new GoogleMapPosition(){ Lat = userLatitude, Lng = userLongitude })">
            <Markers>
                <RadzenGoogleMapMarker Position="@(new GoogleMapPosition(){ Lat = userLatitude, Lng = userLongitude })" />
            </Markers>
        </RadzenGoogleMap>
    </div>
}


@code {
    public string Email { get; set; }
    public string Username { get; set; }
    public string Password { get; set; }

    private User? loggedUser { get; set; }
    private int zoom = 14;
    private bool showCurrentLocationMarker;
    private string clickedPosition = "";
    private double userLatitude = 45.339441070869256;
    private double userLongitude = 14.427323128634512;
    private DateTime TimeOfEvent = DateTime.UtcNow;

    protected override async Task OnInitializedAsync()
    {
        var email = "";

        loggedUser = Context.Users.FirstOrDefault()!;

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("getLocation", DotNetObjectReference.Create(this));
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    [JSInvokable]
    public async Task OnLocationReceived(double latitude, double longitude)
    {
        // Do something with the latitude and longitude
        // For example, you can store it in a property or send it to the server.
        userLatitude = latitude;
        userLongitude = longitude;
        StateHasChanged(); // Update the UI if needed
    }

    void OnMapClick(GoogleMapClickEventArgs args)
    {
        userLatitude = args.Position.Lat;
        userLongitude = args.Position.Lng;
    }

}
