@using RiHack_RitehKromanjonci.Data
@using System.Security.Claims
@using RiHack_RitehKromanjonci.Models;

@inject AppDbContext Context
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime
@inject NavigationManager navManager

<link href="./css/createpost.css" rel="stylesheet" />


    <div class="post_container">
        <div class= "flex-container">
            <div class="box">
                <p>@Username</p>
            </div>
            <div class="box">
                <InputDate @bind-Value="EventTime" />
            </div>
        </div>
        
    </div>
    <div class="input-container">
        <input type="text" class="my-input" placeholder="Opišite aktivnost..." @bind="PostDescription" />
    </div>
    <div class="map">
        <RadzenGoogleMap Style="height: 600px;"
                         Zoom="@zoom"
                         MapClick="@OnMapClick"
                        Center="@(new GoogleMapPosition(){ Lat = Latitude, Lng = Longitude })">
            <Markers>
                <RadzenGoogleMapMarker Position="@(new GoogleMapPosition(){ Lat = Latitude, Lng = Longitude })" />
            </Markers>
        </RadzenGoogleMap>
        
    </div>
   
@code {
    [Parameter]
    public string Username { get; set; }

    [Parameter]
    public DateTime EventTime { get; set; }

    [Parameter]
    public string PostDescription { get; set; }

    [Parameter]
    public double Latitude { get; set; }

    [Parameter]
    public double Longitude { get; set; }

    private int zoom = 14;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("getLocation", DotNetObjectReference.Create(this));
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    [JSInvokable]
    public async Task OnLocationReceived(double latitude, double longitude)
    {
        // Do something with the latitude and longitude
        // For example, you can store it in a property or send it to the server.
        Latitude = latitude;
        Longitude = longitude;
        StateHasChanged(); // Update the UI if needed
    }

    void OnMapClick(GoogleMapClickEventArgs args)
    {
        Latitude = args.Position.Lat;
        Longitude = args.Position.Lng;
    }
}
