@using RiHack_RitehKromanjonci.Data
@using System.Security.Claims
@using RiHack_RitehKromanjonci.Models;

@inject AppDbContext Context
@inject IHttpContextAccessor HttpContextAccessor

@foreach (var post in posts)
{
    <div class="post_container">
        <div>
            <div class="username">
                <p>@post.UserName</p>
            </div>
            <div class="location-time">
                <p>@post.EventTime</p>
            </div>
        </div>
        <div>
            <p>@post.PostDescription</p>
        </div>
        <div class="row">
            <div class="col-xl-6">
                <RadzenGoogleMap Style="height: 600px;"
                                 Zoom="@zoom"
                                 Center="@(new GoogleMapPosition(){ Lat = post.Latitude, Lng = post.Longitude })">
                    <Markers>
                        <RadzenGoogleMapMarker Position="@(new GoogleMapPosition(){ Lat = post.Latitude, Lng = post.Longitude })" />
                    </Markers>
                </RadzenGoogleMap>
            </div>
        </div>
    </div>
}

@code {
    private int zoom = 14;
    private User? loggedUser { get; set; }
    private List<PostModel> posts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //var email = GetUserEmailFromCookie();
        var email = "karlojakopov@gmail.com";

        loggedUser = Context.Users.Where(x => x.Email == email).FirstOrDefault()!;
        posts = Context.Posts.Where(x => x.UserId == loggedUser.Id).ToList();

        await base.OnInitializedAsync();
    }

    private Dictionary<string, string> ParseCookieData(string cookieValue)
    {
        var data = new Dictionary<string, string>();
        var keyValuePairs = cookieValue.Split('&');
        foreach (var keyValuePair in keyValuePairs)
        {
            var parts = keyValuePair.Split('=');
            if (parts.Length == 2)
            {
                var key = parts[0];
                var value = parts[1];
                data[key] = value;
            }
        }
        return data;
    }

    // Get the user's email from the cookie
    public string GetUserEmailFromCookie()
    {
        var principal = HttpContextAccessor.HttpContext.User;
        if (principal.Identity.IsAuthenticated)
        {
            var emailClaim = principal.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name);
            var email = emailClaim?.Value ?? "Not Found";
            return email;
        }
        else
        {
            return "Not authenticated";
        }
    }

}
