@page "/"
@using RiHack_RitehKromanjonci.Data;
@using RiHack_RitehKromanjonci.Models;
@using System.Security.Claims;

@inject AppDbContext Context
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime
@inject NavigationManager navManager


<PageTitle>Sportleaf</PageTitle>


@if (loggedUser is not null)
{
    <CreatePost Username="@loggedUser.Username"
                PostDescription="@activityDescription"
                EventTime="@TimeOfEvent"
                Latitude="@userLatitude"
                Longitude="@userLongitude" />
    <button onclick="@(async () => {await PublicateThePost();})" style="width: 100%; align-content: center;" class="button">Objavi</button>
}



@if (posts is not null && loggedUser is not null)
{
    foreach (var post in posts)
    {
        if (loggedUser.Friends.Where(y => y.Username == post.UserName).FirstOrDefault() is not null)
        {
            <div style="width: 60%; display: flex; align-content:end; justify-content: space-between; margin: auto;">
                <button style="display: flex; align-items: center; color: white; background-color: #E5383B;">
                    <i class="material-icons" style="margin-right: 10px; margin-left: -5px; color: white;" aria-hidden="true">check_circle</i>
                    Friends
                </button>
            </div>
        }
        else
        {
            if (post.UserName != loggedUser.Username)
            {
                <div style="width: 60%; display: flex; align-content:end; justify-content: space-between; margin: auto;">
                    <button onclick="@(() => {AddFriend(post.UserId);})" style="display: flex; align-items: center; color: white; background-color: #E5383B;">
                        <i class="material-icons" style="margin-right: 10px; margin-left: -5px; color: white;" aria-hidden="true">group_add</i>
                        Add Friend
                    </button>
                </div>
            }
        }
        
        <Post Username="@post.UserName"
                PostDescription="@post.PostDescription"
                EventTime="@post.EventTime"
                Latitude="@post.Latitude"
                Longitude="@post.Longitude"
                Joins="@post.NumberOfJoins" />

        <div style="width: 60%; display: flex; align-content:end; justify-content: space-between; margin: auto;">
            <button onclick="@(() => {UpdateJoins(post.Id);})" style="display: flex; align-items: center; color: white; background-color: #E5383B;" class="button">
                <i class="material-icons" style="margin-right: 10px; margin-left: -5px; color: white;" aria-hidden="true">add_circle</i>
                Pridruži se
            </button>
            <div class="button" style="color: white; background-color: #E5383B;">
                @($"People joined: {post.NumberOfJoins}")
            </div>
        </div>
        
    }
}

@code{
    private User? loggedUser { get; set; }
    private double userLatitude = 45.339441070869256;
    private double userLongitude = 14.427323128634512;
    private DateTime TimeOfEvent = DateTime.UtcNow;
    private List<PostModel> posts { get; set; }
    public string activityDescription { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var email = GetUserEmailFromCookie();

        loggedUser = Context.Users.Where(x => x.Email == email).FirstOrDefault()!;

        posts = Context.Posts.ToList();

        StateHasChanged();

        await base.OnInitializedAsync();
    }

    void UpdateJoins(int Id)
    {
        var post = Context.Posts.Where(x => x.Id == Id).FirstOrDefault();

        if (post is not null)
        {
            post.NumberOfJoins++;
            Context.Posts.Update(post);
            Context.SaveChanges();
            StateHasChanged();
        }

    }

    async Task AddFriend(int userId)
    {
        var user = Context.Users.Where(x => x.Id == userId).First();
        if(user is not null)
        {
            if (loggedUser.Friends.Contains(user))
            {
                return;
            }
            else
            {
                loggedUser.Friends.Add(user);
                Context.Users.Update(loggedUser);
                await Context.SaveChangesAsync();
            }
            
        }
        

    }

    async Task PublicateThePost()
    {
        var post = new PostModel
        {
            EventTime = TimeOfEvent,
            Latitude = userLatitude,
            Longitude = userLongitude,
            UserName = loggedUser.Username,
            NumberOfJoins = 0,
            PostDescription = activityDescription,
            UserId = loggedUser.Id
        };

        Context.Posts.Add(post);
        await Context.SaveChangesAsync();

        StateHasChanged();
    }

    private Dictionary<string, string> ParseCookieData(string cookieValue)
    {
        var data = new Dictionary<string, string>();
        var keyValuePairs = cookieValue.Split('&');
        foreach (var keyValuePair in keyValuePairs)
        {
            var parts = keyValuePair.Split('=');
            if (parts.Length == 2)
            {
                var key = parts[0];
                var value = parts[1];
                data[key] = value;
            }
        }
        return data;
    }

    // Get the user's email from the cookie
    public string GetUserEmailFromCookie()
    {
        var principal = HttpContextAccessor.HttpContext.User;
        if (principal.Identity.IsAuthenticated)
        {
            var emailClaim = principal.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name);
            var email = emailClaim?.Value ?? "Not Found";
            return email;
        }
        else
        {
            return "Not authenticated";
        }
    }

}