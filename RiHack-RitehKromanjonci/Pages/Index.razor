@page "/"
@using RiHack_RitehKromanjonci.Data;
@using RiHack_RitehKromanjonci.Models;
@using System.Security.Claims;

@inject AppDbContext Context
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime
@inject NavigationManager navManager

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="shortcut icon" href="images/favicon.ico" type="image/x-icon">
    <title>Sportleaf</title>
    <!-- style css link -->
    <link rel="stylesheet" href="./css/index-novi.css">
    <!-- fontawesome css link -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css" integrity="sha512-KfkfwYDsLkIlwQp6LFnl8zNdLGxu9YAA1QvwINks4PhcElQSvqcyVLLD9aMhXd13uQjoXtEKNosOWaZqXgel0g==" crossorigin="anonymous" referrerpolicy="no-referrer" />

</head>
<body>
    
<!-- header section start -->


    <header>
        <div class="header-container">
            <div class="header-wrapper">
                <div class="logoBox">
                    <button><a href="./"><img src="images/icons8-home-480.png" alt="home"></a></button>
                </div>
                <div class="searchBox">
                    <input type="search">
                    <i class="fas fa-search"></i>
                </div>
                <div class="iconBox2">
                    <AuthorizeView Roles="User">
                        <Authorized>
                            <button><a href="./Discussions"><img src="images/icons8-chat-50.png" alt="chat"></a></button>
                            <button><a href="./logout"><img src="images/icons8-logout-30.png" alt="logout"></a></button>
                            <button><a href="./user_profile"><label><img src="images/user.jpg" alt="user"></label></a></button>
                        </Authorized>

                        <NotAuthorized>
                            <div style="margin-left: 20px;">
                                <NavLink class="nav-link" href="./login" style="color: #00AD85;">Prijava</NavLink>
                            </div>

                            <div style="margin-left: 20px;">
                                <NavLink class="nav-link" href="./register" style="color: #00AD85;">Registracija</NavLink>
                            </div>
                        </NotAuthorized>
                    </AuthorizeView>
                </div>
            </div>
        </div>
    </header>


<!-- header section end -->
<!-- home section start -->


<div class="home">
    <div class="container">
        <div class="home-weapper">"

            <!-- home center start here -->

            <div class="home-center">
                <div class="home-center-wrapper">
                    @if (LoggedUser is not null)
                    {
                        <div class="createPost">

                            <h3 class="mini-headign">Napravi objavu</h3>
                            <div class="post-text">
                                <img src="images/user.jpg" alt="user">
                                <input type="text-area" class="my-input" placeholder="@($"{LoggedUser.Username} Opišite aktivnost...")" @bind="PostDescription" />
                            </div>
                            <div class="post-text">
                                <RadzenGoogleMap Style="height: 200px;"
                                                    Zoom="@zoom"
                                                    MapClick="@OnMapClick"
                                                    Center="@(new GoogleMapPosition(){ Lat = Latitude, Lng = Longitude })">
                                    <Markers>
                                        <RadzenGoogleMapMarker Position="@(new GoogleMapPosition(){ Lat = Latitude, Lng = Longitude })" />
                                    </Markers>
                                </RadzenGoogleMap>
                            </div>

                            <div class="post-icon" style="justify-content: space-between; display: flex;">
                                <InputDate style="background: #ff4154;" class="fa-solid fa-camera" @bind-Value="EventTime" />
                                    <button onclick="@(async () => {await PublicateThePost();})" style="background: #00ADB5;">Objavi</button>
                            </div>
                        </div>

                        if(posts is not null)
                        {
                            foreach (var post in posts)
                            {
                                <div class="createPost">

                                    <h3 class="mini-headign">@post.UserName</h3>
                                    <div class="post-text">
                                        <p>@($"{post.UserName} je objavio event: {post.PostDescription}")</p>
                                    </div>
                                    <div class="post-text">
                                        <RadzenGoogleMap Style="height: 200px;"
                                                            Zoom="@zoom"
                                                            MapClick="@OnMapClick"
                                                            Center="@(new GoogleMapPosition(){ Lat = post.Latitude, Lng = post.Longitude })">
                                            <Markers>
                                                <RadzenGoogleMapMarker Position="@(new GoogleMapPosition(){ Lat = post.Latitude, Lng = post.Longitude })" />
                                            </Markers>
                                        </RadzenGoogleMap>
                                    </div>

                                    <div class="post-icon" style="justify-content: space-between; display: flex;">
                                        <div>
                                            @if (LoggedUser.Friends.Where(y => y.Username == post.UserName).FirstOrDefault() is not null)
                                            {
                                                <button style="display: flex; align-items: center; color: white; background-color: #E5383B;">
                                                    <i class="material-icons" style="margin-right: 10px; margin-left: -5px; color: white;" aria-hidden="true">check_circle</i>
                                                    Friends
                                                </button>
                                            }
                                            else
                                            {
                                                if (post.UserName != LoggedUser.Username)
                                                {
                                                    <button onclick="@(() => {AddFriend(post.UserId);})" style="display: flex; align-items: center; color: white; background-color: #E5383B;">
                                                        <i class="material-icons" style="margin-right: 10px; margin-left: -5px; color: white;" aria-hidden="true">group_add</i>
                                                        Add Friend
                                                    </button>
                                                }
                                            }
                                        </div>
                                        <div style="display: flex;">
                                            <button onclick="@(() => {UpdateJoins(post.Id);})" style="display: flex; align-items: center; color: white; background-color: #E5383B;" class="button">
                                                <i class="material-icons" style="margin-right: 10px; margin-left: -5px; color: white;" aria-hidden="true">add_circle</i>
                                                Pridruži se
                                            </button>
                                            <div class="button" style=" border-radius: 5px; margin-left: 5px; display: flex; align-content: center; align-items: center; color: white; background-color: #E5383B;">
                                                @($"Pridruženi: {post.NumberOfJoins}")
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <br />
                            }
                        }

                    }
                </div> <!-- home center wrapper end -->
            </div> <!-- home center end -->
        </div>
    </div>
</div>
<!-- home section end -->
</body>
</html>

@code{
    public User LoggedUser { get; set; }

    public string Username { get; set; } = string.Empty;

    public DateTime EventTime { get; set; } = DateTime.UtcNow;

    public string PostDescription { get; set; } = string.Empty;

    public double Latitude { get; set; } = 45.339441070869256;

    public double Longitude { get; set; } = 14.427323128634512;

    private int zoom = 14;

    private List<User> Users { get; set; } = new List<User>();

    private List<PostModel> posts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var email = GetUserEmailFromCookie();

        LoggedUser = Context.Users.Where(x => x.Email == email).FirstOrDefault()!;
        Users = Context.Users.ToList();

        foreach (var user in Users)
        {
            var points = Context.Posts.Where(x => x.UserId == user.Id).Select(x => x.NumberOfJoins).Sum();

            Users.Where(x => x.Id == user.Id).First().Points = points;
            if (points < 250)
            {
                Users.Where(x => x.Id == user.Id).First().Ranks = Rank.Beginner;
            }
            else if (points >= 250 && points < 750)
            {
                Users.Where(x => x.Id == user.Id).First().Ranks = Rank.Intermediate;
            }
            else
            {
                Users.Where(x => x.Id == user.Id).First().Ranks = Rank.Trainer;
            }

        }


        Context.Users.UpdateRange(Users);
        await Context.SaveChangesAsync();

        posts = Context.Posts.ToList();

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("getLocation", DotNetObjectReference.Create(this));
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    [JSInvokable]
    public async Task OnLocationReceived(double latitude, double longitude)
    {
        // Do something with the latitude and longitude
        // For example, you can store it in a property or send it to the server.
        Latitude = latitude;
        Longitude = longitude;
        //StateHasChanged(); // Update the UI if needed
    }

    void OnMapClick(GoogleMapClickEventArgs args)
    {
        Latitude = args.Position.Lat;
        Longitude = args.Position.Lng;
    }

    void UpdateJoins(int Id)
    {
        var post = Context.Posts.Where(x => x.Id == Id).FirstOrDefault();

        if (post is not null)
        {
            post.NumberOfJoins++;
            Context.Posts.Update(post);
            Context.SaveChanges();
            StateHasChanged();
        }

    }

    async Task AddFriend(int userId)
    {
        var user = Context.Users.Where(x => x.Id == userId).First();
        if (user is not null)
        {
            if (LoggedUser.Friends.Contains(user))
            {
                return;
            }
            else
            {
                LoggedUser.Friends.Add(user);
                Context.Users.Update(LoggedUser);
                await Context.SaveChangesAsync();
            }

        }


    }

    async Task PublicateThePost()
    {
        var post = new PostModel
        {
            EventTime = EventTime,
            Latitude = Latitude,
            Longitude = Longitude,
            UserName = LoggedUser.Username,
            NumberOfJoins = 0,
            PostDescription = PostDescription,
            UserId = LoggedUser.Id
        };

        Context.Posts.Add(post);
        await Context.SaveChangesAsync();

        StateHasChanged();
    }

    private Dictionary<string, string> ParseCookieData(string cookieValue)
    {
        var data = new Dictionary<string, string>();
        var keyValuePairs = cookieValue.Split('&');
        foreach (var keyValuePair in keyValuePairs)
        {
            var parts = keyValuePair.Split('=');
            if (parts.Length == 2)
            {
                var key = parts[0];
                var value = parts[1];
                data[key] = value;
            }
        }
        return data;
    }

    // Get the user's email from the cookie
    public string GetUserEmailFromCookie()
    {
        var principal = HttpContextAccessor.HttpContext.User;
        if (principal.Identity.IsAuthenticated)
        {
            var emailClaim = principal.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name);
            var email = emailClaim?.Value ?? "Not Found";
            return email;
        }
        else
        {
            return "Not authenticated";
        }
    }
}