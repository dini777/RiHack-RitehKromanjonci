@page "/user_profile"
@using RiHack_RitehKromanjonci.Data;
@using RiHack_RitehKromanjonci.Models;
@using System.Security.Claims;

@inject AppDbContext Context
@inject IHttpContextAccessor HttpContextAccessor

@if (loggedUser is not null)
{
    <div style="display: flex; justify-content: space-between;">
        <div style="text-align: center;">
            <img style="width: 200px; height: 200px;" src="./images/4.png" alt="Avatar">
            <p style="margin-top: 5px; font-weight: bold; font-size: 30px;">@(loggedUser.Username)</p>
        </div>
        <div>
            <p>broj bodova</p>
        </div>
        @if (Rank == Rank.Beginner)
        {
            <div style="text-align: center;">
                <img style="width: 200px; height: 200px;" src="./images/1.png" alt="Beginner-Picture">
                <p style="margin-top: 5px; font-weight: bold; font-size: 30px;">Početnik</p>
            </div>
        }

        @if (Rank == Rank.Intermediate)
        {
            <div style="text-align: center;">
                <img style="width: 200px; height: 200px;" src="./images/2.png" alt="Intermediate-Picture">
                <p style="margin-top: 5px; font-weight: bold; font-size: 30px;">Rekreativac</p>
            </div>
        }

        @if (Rank == Rank.Trainer)
        {
            <div style="text-align: center;">
                <img style="width: 200px; height: 200px;" src="./images/3.png" alt="Trainer-Picture">
                <p style="margin-top: 5px; font-weight: bold; font-size: 30px;">Trener</p>
            </div>
        }

    </div>


    <div style="display: flex; justify-content: space-between;">
        <div style="text-align: center; width:30%;">
            <p style="margin-top: 5px; font-weight: bold; font-size: 30px;">Prijatelji</p>
            @if (friends is not null)
            {
                @foreach (var friend in friends)
                {
                    <div style="display: flex; align-items: center; border: solid 2px black; border-radius: 5px;">
                        
                        <img style="margin-right: 20%; margin-left: 5%; width: 200px; height: 200px;" src="./images/1.png" alt="Trainer-Picture">
                        <p style="margin-top: 5px;  font-weight: bold; font-size: 50px;">@friend.Username</p>
                    </div>
                }
            }
            else
            {
                <p style="margin-top: 5px; font-weight: bold; font-size: 15px;">Nažalost još nemate prijatelja</p>
            }


        </div>
        <div style="text-align: center; width:70%; margin-left: 200px;">
            <p style="margin-top: 5px; font-weight: bold; font-size: 30px;">Objave</p>
            @if (posts is not null)
            {
                foreach (var post in posts)
                {
                    <div>
                        <Post Username="@post.UserName"
                              PostDescription="@post.PostDescription"
                              EventTime="@post.EventTime"
                              Latitude="@post.Latitude"
                              Longitude="@post.Longitude"
                              Joins="@post.NumberOfJoins" />
                    </div>

                    <br />
                    <br />
                    <br />
                }
            }
        </div>

    </div>
    
}


@code {
    private Rank Rank { get; set; } = Rank.Empty;

    private User? loggedUser { get; set; }
    private List<PostModel> posts { get; set; }
    private List<User> friends { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var email = GetUserEmailFromCookie();
        loggedUser = Context.Users.Where(x => x.Email == email).FirstOrDefault()!;

        if (loggedUser is not null)
        {
            posts = Context.Posts.Where(x => x.UserId == loggedUser.Id).ToList();
            friends = loggedUser.Friends;

        }

        StateHasChanged();

        await base.OnInitializedAsync();
    }

    private Dictionary<string, string> ParseCookieData(string cookieValue)
    {
        var data = new Dictionary<string, string>();
        var keyValuePairs = cookieValue.Split('&');
        foreach (var keyValuePair in keyValuePairs)
        {
            var parts = keyValuePair.Split('=');
            if (parts.Length == 2)
            {
                var key = parts[0];
                var value = parts[1];
                data[key] = value;
            }
        }
        return data;
    }

    // Get the user's email from the cookie
    public string GetUserEmailFromCookie()
    {
        var principal = HttpContextAccessor.HttpContext.User;
        if (principal.Identity.IsAuthenticated)
        {
            var emailClaim = principal.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name);
            var email = emailClaim?.Value ?? "Not Found";
            return email;
        }
        else
        {
            return "Not authenticated";
        }
    }
}
