@page "/login"
@using System.ComponentModel.DataAnnotations;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.JSInterop;
@using RiHack_RitehKromanjonci.Data;

@inject AppDbContext dbContext
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager

<h3>Login</h3>


<EditForm Model="loginModel" OnValidSubmit="LoginUser">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="Email">Email:</label>
        <InputText id="Email" @bind-Value="loginModel.Email" class="form-control" />
        <ValidationMessage For="() => loginModel.Email" />
    </div>

    <div class="form-group">
        <label for="Password">Password:</label>
        <InputText id="Password" type="password" @bind-Value="loginModel.Password" class="form-control" />
        <ValidationMessage For="() => loginModel.Password" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Login</button>
    </div>
</EditForm>


@if (!string.IsNullOrEmpty(loginModel.ErrorMessage))
{
    <div class="alert alert-danger">@loginModel.ErrorMessage</div>
}

@code {
    public class LoginModel
    {
        [EmailAddress]
        [Required(ErrorMessage = "Email is required.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; }

        public string ErrorMessage { get; set; }
    }

    private LoginModel loginModel = new LoginModel();

    private async Task LoginUser()
    {
        // Perform authentication here
        // You can use Entity Framework to check if the user exists and the password is correct

        var user = await dbContext.Users.FirstOrDefaultAsync(u => u.Email == loginModel.Email && u.Password == loginModel.Password);

        if (user != null)
        {
            // Authentication successful
            // Set a cookie with the user's email
            var options = new CookieOptions
                {
                    Expires = DateTime.Now.AddHours(1), // Set the expiration time for the cookie
                    IsEssential = true // This marks the cookie as essential for the app's functionality
                };

            await jsRuntime.InvokeVoidAsync("setEmailCookie", loginModel.Email, 3600); // Save email for 1 hour (3600 seconds)


            // Redirect to a dashboard or another page
            StateHasChanged();
            navigationManager.NavigateTo("/");
        }
        else
        {
            // Authentication failed
            loginModel.ErrorMessage = "Invalid email or password.";
        }
    }

    

}
